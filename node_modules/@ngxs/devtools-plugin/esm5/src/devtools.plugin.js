/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Inject, Injector } from '@angular/core';
import { getActionTypeFromInstance, Store } from '@ngxs/store';
import { tap } from 'rxjs/operators';
import { NGXS_DEVTOOLS_OPTIONS } from './symbols';
/**
 * Adds support for the Redux Devtools extension:
 * http://extension.remotedev.io/
 */
var NgxsReduxDevtoolsPlugin = /** @class */ (function () {
    function NgxsReduxDevtoolsPlugin(_options, _injector) {
        var _this = this;
        this._options = _options;
        this._injector = _injector;
        this.devtoolsExtension = null;
        this.windowObj = typeof window !== 'undefined' ? window : {};
        /** @type {?} */
        var globalDevtools = this.windowObj['__REDUX_DEVTOOLS_EXTENSION__'] || this.windowObj['devToolsExtension'];
        if (globalDevtools) {
            this.devtoolsExtension = (/** @type {?} */ (globalDevtools.connect(_options)));
            this.devtoolsExtension.subscribe(function (a) { return _this.dispatched(a); });
        }
    }
    /**
     * Middleware handle function
     */
    /**
     * Middleware handle function
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    NgxsReduxDevtoolsPlugin.prototype.handle = /**
     * Middleware handle function
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    function (state, action, next) {
        var _this = this;
        /** @type {?} */
        var isDisabled = this._options && this._options.disabled;
        if (!this.devtoolsExtension || isDisabled) {
            return next(state, action);
        }
        return next(state, action).pipe(tap(function (newState) {
            // if init action, send initial state to dev tools
            /** @type {?} */
            var isInitAction = getActionTypeFromInstance(action) === '@@INIT';
            if (isInitAction) {
                _this.devtoolsExtension.init(state);
            }
            else {
                /** @type {?} */
                var type = getActionTypeFromInstance(action);
                _this.devtoolsExtension.send(tslib_1.__assign({}, action, { type: type }), newState);
            }
        }));
    };
    /**
     * Handle the action from the dev tools subscription
     */
    /**
     * Handle the action from the dev tools subscription
     * @param {?} action
     * @return {?}
     */
    NgxsReduxDevtoolsPlugin.prototype.dispatched = /**
     * Handle the action from the dev tools subscription
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var _this = this;
        // Lazy get the store for circular depedency issues
        /** @type {?} */
        var store = this._injector.get(Store);
        if (action.type === 'DISPATCH') {
            if (action.payload.type === 'JUMP_TO_ACTION' || action.payload.type === 'JUMP_TO_STATE') {
                /** @type {?} */
                var prevState = JSON.parse(action.state);
                store.reset(prevState);
            }
            else if (action.payload.type === 'TOGGLE_ACTION') {
                console.warn('Skip is not supported at this time.');
            }
            else if (action.payload.type === 'IMPORT_STATE') {
                var _a = action.payload.nextLiftedState, actionsById_1 = _a.actionsById, computedStates_1 = _a.computedStates, currentStateIndex = _a.currentStateIndex;
                this.devtoolsExtension.init(computedStates_1[0].state);
                Object.keys(actionsById_1)
                    .filter(function (actionId) { return actionId !== '0'; })
                    .forEach(function (actionId) { return _this.devtoolsExtension.send(actionsById_1[actionId], computedStates_1[actionId].state); });
                store.reset(computedStates_1[currentStateIndex].state);
            }
        }
        else if (action.type === 'ACTION') {
            /** @type {?} */
            var actionPayload = JSON.parse(action.payload);
            store.dispatch(actionPayload);
        }
    };
    NgxsReduxDevtoolsPlugin.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxsReduxDevtoolsPlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGXS_DEVTOOLS_OPTIONS,] }] },
        { type: Injector }
    ]; };
    return NgxsReduxDevtoolsPlugin;
}());
export { NgxsReduxDevtoolsPlugin };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype.devtoolsExtension;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype.windowObj;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype._options;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype._injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2dG9vbHMucGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvZGV2dG9vbHMtcGx1Z2luLyIsInNvdXJjZXMiOlsic3JjL2RldnRvb2xzLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQWMseUJBQXlCLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQThDLHFCQUFxQixFQUFzQixNQUFNLFdBQVcsQ0FBQzs7Ozs7QUFNbEg7SUFLRSxpQ0FBbUQsUUFBNkIsRUFBVSxTQUFtQjtRQUE3RyxpQkFNQztRQU5rRCxhQUFRLEdBQVIsUUFBUSxDQUFxQjtRQUFVLGNBQVMsR0FBVCxTQUFTLENBQVU7UUFINUYsc0JBQWlCLEdBQWlDLElBQUksQ0FBQztRQUN2RCxjQUFTLEdBQVEsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7WUFHdEUsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsOEJBQThCLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDO1FBQzVHLElBQUksY0FBYyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxtQkFBQSxjQUFjLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUF5QixDQUFDO1lBQ25GLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFsQixDQUFrQixDQUFDLENBQUM7U0FDM0Q7SUFDSCxDQUFDO0lBRUQ7O09BRUc7Ozs7Ozs7O0lBQ0gsd0NBQU07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RCxJQThEQztTQTdEWSx1QkFBdUI7Ozs7OztJQUNsQyxvREFBd0U7Ozs7O0lBQ3hFLDRDQUE4RTs7Ozs7SUFFbEUsMkNBQW9FOzs7OztJQUFFLDRDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmd4c1BsdWdpbiwgZ2V0QWN0aW9uVHlwZUZyb21JbnN0YW5jZSwgU3RvcmUgfSBmcm9tICdAbmd4cy9zdG9yZSc7XHJcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IE5neHNEZXZ0b29sc0V4dGVuc2lvbiwgTmd4c0RldnRvb2xzT3B0aW9ucywgTkdYU19ERVZUT09MU19PUFRJT05TLCBOZ3hzRGV2dG9vbHNBY3Rpb24gfSBmcm9tICcuL3N5bWJvbHMnO1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgc3VwcG9ydCBmb3IgdGhlIFJlZHV4IERldnRvb2xzIGV4dGVuc2lvbjpcclxuICogaHR0cDovL2V4dGVuc2lvbi5yZW1vdGVkZXYuaW8vXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOZ3hzUmVkdXhEZXZ0b29sc1BsdWdpbiBpbXBsZW1lbnRzIE5neHNQbHVnaW4ge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGV2dG9vbHNFeHRlbnNpb246IE5neHNEZXZ0b29sc0V4dGVuc2lvbiB8IG51bGwgPSBudWxsO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgd2luZG93T2JqOiBhbnkgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihASW5qZWN0KE5HWFNfREVWVE9PTFNfT1BUSU9OUykgcHJpdmF0ZSBfb3B0aW9uczogTmd4c0RldnRvb2xzT3B0aW9ucywgcHJpdmF0ZSBfaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICBjb25zdCBnbG9iYWxEZXZ0b29scyA9IHRoaXMud2luZG93T2JqWydfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fJ10gfHwgdGhpcy53aW5kb3dPYmpbJ2RldlRvb2xzRXh0ZW5zaW9uJ107XHJcbiAgICBpZiAoZ2xvYmFsRGV2dG9vbHMpIHtcclxuICAgICAgdGhpcy5kZXZ0b29sc0V4dGVuc2lvbiA9IGdsb2JhbERldnRvb2xzLmNvbm5lY3QoX29wdGlvbnMpIGFzIE5neHNEZXZ0b29sc0V4dGVuc2lvbjtcclxuICAgICAgdGhpcy5kZXZ0b29sc0V4dGVuc2lvbi5zdWJzY3JpYmUoYSA9PiB0aGlzLmRpc3BhdGNoZWQoYSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWlkZGxld2FyZSBoYW5kbGUgZnVuY3Rpb25cclxuICAgKi9cclxuICBoYW5kbGUoc3RhdGU6IGFueSwgYWN0aW9uOiBhbnksIG5leHQ6IGFueSkge1xyXG4gICAgY29uc3QgaXNEaXNhYmxlZCA9IHRoaXMuX29wdGlvbnMgJiYgdGhpcy5fb3B0aW9ucy5kaXNhYmxlZDtcclxuICAgIGlmICghdGhpcy5kZXZ0b29sc0V4dGVuc2lvbiB8fCBpc0Rpc2FibGVkKSB7XHJcbiAgICAgIHJldHVybiBuZXh0KHN0YXRlLCBhY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXh0KHN0YXRlLCBhY3Rpb24pLnBpcGUoXHJcbiAgICAgIHRhcChuZXdTdGF0ZSA9PiB7XHJcbiAgICAgICAgLy8gaWYgaW5pdCBhY3Rpb24sIHNlbmQgaW5pdGlhbCBzdGF0ZSB0byBkZXYgdG9vbHNcclxuICAgICAgICBjb25zdCBpc0luaXRBY3Rpb24gPSBnZXRBY3Rpb25UeXBlRnJvbUluc3RhbmNlKGFjdGlvbikgPT09ICdAQElOSVQnO1xyXG4gICAgICAgIGlmIChpc0luaXRBY3Rpb24pIHtcclxuICAgICAgICAgIHRoaXMuZGV2dG9vbHNFeHRlbnNpb24uaW5pdChzdGF0ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IHR5cGUgPSBnZXRBY3Rpb25UeXBlRnJvbUluc3RhbmNlKGFjdGlvbik7XHJcblxyXG4gICAgICAgICAgdGhpcy5kZXZ0b29sc0V4dGVuc2lvbi5zZW5kKHsgLi4uYWN0aW9uLCB0eXBlIH0sIG5ld1N0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIHRoZSBhY3Rpb24gZnJvbSB0aGUgZGV2IHRvb2xzIHN1YnNjcmlwdGlvblxyXG4gICAqL1xyXG4gIGRpc3BhdGNoZWQoYWN0aW9uOiBOZ3hzRGV2dG9vbHNBY3Rpb24pIHtcclxuICAgIC8vIExhenkgZ2V0IHRoZSBzdG9yZSBmb3IgY2lyY3VsYXIgZGVwZWRlbmN5IGlzc3Vlc1xyXG4gICAgY29uc3Qgc3RvcmUgPSB0aGlzLl9pbmplY3Rvci5nZXQoU3RvcmUpO1xyXG4gICAgaWYgKGFjdGlvbi50eXBlID09PSAnRElTUEFUQ0gnKSB7XHJcbiAgICAgIGlmIChhY3Rpb24ucGF5bG9hZC50eXBlID09PSAnSlVNUF9UT19BQ1RJT04nIHx8IGFjdGlvbi5wYXlsb2FkLnR5cGUgPT09ICdKVU1QX1RPX1NUQVRFJykge1xyXG4gICAgICAgIGNvbnN0IHByZXZTdGF0ZSA9IEpTT04ucGFyc2UoYWN0aW9uLnN0YXRlKTtcclxuICAgICAgICBzdG9yZS5yZXNldChwcmV2U3RhdGUpO1xyXG4gICAgICB9IGVsc2UgaWYgKGFjdGlvbi5wYXlsb2FkLnR5cGUgPT09ICdUT0dHTEVfQUNUSU9OJykge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignU2tpcCBpcyBub3Qgc3VwcG9ydGVkIGF0IHRoaXMgdGltZS4nKTtcclxuICAgICAgfSBlbHNlIGlmIChhY3Rpb24ucGF5bG9hZC50eXBlID09PSAnSU1QT1JUX1NUQVRFJykge1xyXG4gICAgICAgIGNvbnN0IHsgYWN0aW9uc0J5SWQsIGNvbXB1dGVkU3RhdGVzLCBjdXJyZW50U3RhdGVJbmRleCB9ID0gYWN0aW9uLnBheWxvYWQubmV4dExpZnRlZFN0YXRlO1xyXG4gICAgICAgIHRoaXMuZGV2dG9vbHNFeHRlbnNpb24uaW5pdChjb21wdXRlZFN0YXRlc1swXS5zdGF0ZSk7XHJcbiAgICAgICAgT2JqZWN0LmtleXMoYWN0aW9uc0J5SWQpXHJcbiAgICAgICAgICAuZmlsdGVyKGFjdGlvbklkID0+IGFjdGlvbklkICE9PSAnMCcpXHJcbiAgICAgICAgICAuZm9yRWFjaChhY3Rpb25JZCA9PiB0aGlzLmRldnRvb2xzRXh0ZW5zaW9uLnNlbmQoYWN0aW9uc0J5SWRbYWN0aW9uSWRdLCBjb21wdXRlZFN0YXRlc1thY3Rpb25JZF0uc3RhdGUpKTtcclxuICAgICAgICBzdG9yZS5yZXNldChjb21wdXRlZFN0YXRlc1tjdXJyZW50U3RhdGVJbmRleF0uc3RhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGFjdGlvbi50eXBlID09PSAnQUNUSU9OJykge1xyXG4gICAgICBjb25zdCBhY3Rpb25QYXlsb2FkID0gSlNPTi5wYXJzZShhY3Rpb24ucGF5bG9hZCk7XHJcbiAgICAgIHN0b3JlLmRpc3BhdGNoKGFjdGlvblBheWxvYWQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=