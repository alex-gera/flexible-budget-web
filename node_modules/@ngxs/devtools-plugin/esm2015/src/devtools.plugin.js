/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, Injector } from '@angular/core';
import { getActionTypeFromInstance, Store } from '@ngxs/store';
import { tap } from 'rxjs/operators';
import { NGXS_DEVTOOLS_OPTIONS } from './symbols';
/**
 * Adds support for the Redux Devtools extension:
 * http://extension.remotedev.io/
 */
export class NgxsReduxDevtoolsPlugin {
    /**
     * @param {?} _options
     * @param {?} _injector
     */
    constructor(_options, _injector) {
        this._options = _options;
        this._injector = _injector;
        this.devtoolsExtension = null;
        this.windowObj = typeof window !== 'undefined' ? window : {};
        /** @type {?} */
        const globalDevtools = this.windowObj['__REDUX_DEVTOOLS_EXTENSION__'] || this.windowObj['devToolsExtension'];
        if (globalDevtools) {
            this.devtoolsExtension = (/** @type {?} */ (globalDevtools.connect(_options)));
            this.devtoolsExtension.subscribe(a => this.dispatched(a));
        }
    }
    /**
     * Middleware handle function
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    handle(state, action, next) {
        /** @type {?} */
        const isDisabled = this._options && this._options.disabled;
        if (!this.devtoolsExtension || isDisabled) {
            return next(state, action);
        }
        return next(state, action).pipe(tap(newState => {
            // if init action, send initial state to dev tools
            /** @type {?} */
            const isInitAction = getActionTypeFromInstance(action) === '@@INIT';
            if (isInitAction) {
                this.devtoolsExtension.init(state);
            }
            else {
                /** @type {?} */
                const type = getActionTypeFromInstance(action);
                this.devtoolsExtension.send(Object.assign({}, action, { type }), newState);
            }
        }));
    }
    /**
     * Handle the action from the dev tools subscription
     * @param {?} action
     * @return {?}
     */
    dispatched(action) {
        // Lazy get the store for circular depedency issues
        /** @type {?} */
        const store = this._injector.get(Store);
        if (action.type === 'DISPATCH') {
            if (action.payload.type === 'JUMP_TO_ACTION' || action.payload.type === 'JUMP_TO_STATE') {
                /** @type {?} */
                const prevState = JSON.parse(action.state);
                store.reset(prevState);
            }
            else if (action.payload.type === 'TOGGLE_ACTION') {
                console.warn('Skip is not supported at this time.');
            }
            else if (action.payload.type === 'IMPORT_STATE') {
                const { actionsById, computedStates, currentStateIndex } = action.payload.nextLiftedState;
                this.devtoolsExtension.init(computedStates[0].state);
                Object.keys(actionsById)
                    .filter(actionId => actionId !== '0')
                    .forEach(actionId => this.devtoolsExtension.send(actionsById[actionId], computedStates[actionId].state));
                store.reset(computedStates[currentStateIndex].state);
            }
        }
        else if (action.type === 'ACTION') {
            /** @type {?} */
            const actionPayload = JSON.parse(action.payload);
            store.dispatch(actionPayload);
        }
    }
}
NgxsReduxDevtoolsPlugin.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxsReduxDevtoolsPlugin.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGXS_DEVTOOLS_OPTIONS,] }] },
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype.devtoolsExtension;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype.windowObj;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype._options;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype._injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2dG9vbHMucGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvZGV2dG9vbHMtcGx1Z2luLyIsInNvdXJjZXMiOlsic3JjL2RldnRvb2xzLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBYyx5QkFBeUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0UsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBOEMscUJBQXFCLEVBQXNCLE1BQU0sV0FBVyxDQUFDOzs7OztBQU9sSCxNQUFNLE9BQU8sdUJBQXVCOzs7OztJQUlsQyxZQUFtRCxRQUE2QixFQUFVLFNBQW1CO1FBQTFELGFBQVEsR0FBUixRQUFRLENBQXFCO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBVTtRQUg1RixzQkFBaUIsR0FBaUMsSUFBSSxDQUFDO1FBQ3ZELGNBQVMsR0FBUSxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDOztjQUd0RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUM7UUFDNUcsSUFBSSxjQUFjLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLG1CQUFBLGNBQWMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQXlCLENBQUM7WUFDbkYsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzRDtJQUNILENBQUM7Ozs7Ozs7O0lBS0QsTUFBTSxDQUFDLEtBQVUsRUFBRSxN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YmxlLCBJbmplY3QsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5neHNQbHVnaW4sIGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UsIFN0b3JlIH0gZnJvbSAnQG5neHMvc3RvcmUnO1xyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBOZ3hzRGV2dG9vbHNFeHRlbnNpb24sIE5neHNEZXZ0b29sc09wdGlvbnMsIE5HWFNfREVWVE9PTFNfT1BUSU9OUywgTmd4c0RldnRvb2xzQWN0aW9uIH0gZnJvbSAnLi9zeW1ib2xzJztcclxuXHJcbi8qKlxyXG4gKiBBZGRzIHN1cHBvcnQgZm9yIHRoZSBSZWR1eCBEZXZ0b29scyBleHRlbnNpb246XHJcbiAqIGh0dHA6Ly9leHRlbnNpb24ucmVtb3RlZGV2LmlvL1xyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmd4c1JlZHV4RGV2dG9vbHNQbHVnaW4gaW1wbGVtZW50cyBOZ3hzUGx1Z2luIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGRldnRvb2xzRXh0ZW5zaW9uOiBOZ3hzRGV2dG9vbHNFeHRlbnNpb24gfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIHJlYWRvbmx5IHdpbmRvd09iajogYW55ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fTtcclxuXHJcbiAgY29uc3RydWN0b3IoQEluamVjdChOR1hTX0RFVlRPT0xTX09QVElPTlMpIHByaXZhdGUgX29wdGlvbnM6IE5neHNEZXZ0b29sc09wdGlvbnMsIHByaXZhdGUgX2luamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgY29uc3QgZ2xvYmFsRGV2dG9vbHMgPSB0aGlzLndpbmRvd09ialsnX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyddIHx8IHRoaXMud2luZG93T2JqWydkZXZUb29sc0V4dGVuc2lvbiddO1xyXG4gICAgaWYgKGdsb2JhbERldnRvb2xzKSB7XHJcbiAgICAgIHRoaXMuZGV2dG9vbHNFeHRlbnNpb24gPSBnbG9iYWxEZXZ0b29scy5jb25uZWN0KF9vcHRpb25zKSBhcyBOZ3hzRGV2dG9vbHNFeHRlbnNpb247XHJcbiAgICAgIHRoaXMuZGV2dG9vbHNFeHRlbnNpb24uc3Vic2NyaWJlKGEgPT4gdGhpcy5kaXNwYXRjaGVkKGEpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1pZGRsZXdhcmUgaGFuZGxlIGZ1bmN0aW9uXHJcbiAgICovXHJcbiAgaGFuZGxlKHN0YXRlOiBhbnksIGFjdGlvbjogYW55LCBuZXh0OiBhbnkpIHtcclxuICAgIGNvbnN0IGlzRGlzYWJsZWQgPSB0aGlzLl9vcHRpb25zICYmIHRoaXMuX29wdGlvbnMuZGlzYWJsZWQ7XHJcbiAgICBpZiAoIXRoaXMuZGV2dG9vbHNFeHRlbnNpb24gfHwgaXNEaXNhYmxlZCkge1xyXG4gICAgICByZXR1cm4gbmV4dChzdGF0ZSwgYWN0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV4dChzdGF0ZSwgYWN0aW9uKS5waXBlKFxyXG4gICAgICB0YXAobmV3U3RhdGUgPT4ge1xyXG4gICAgICAgIC8vIGlmIGluaXQgYWN0aW9uLCBzZW5kIGluaXRpYWwgc3RhdGUgdG8gZGV2IHRvb2xzXHJcbiAgICAgICAgY29uc3QgaXNJbml0QWN0aW9uID0gZ2V0QWN0aW9uVHlwZUZyb21JbnN0YW5jZShhY3Rpb24pID09PSAnQEBJTklUJztcclxuICAgICAgICBpZiAoaXNJbml0QWN0aW9uKSB7XHJcbiAgICAgICAgICB0aGlzLmRldnRvb2xzRXh0ZW5zaW9uLmluaXQoc3RhdGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCB0eXBlID0gZ2V0QWN0aW9uVHlwZUZyb21JbnN0YW5jZShhY3Rpb24pO1xyXG5cclxuICAgICAgICAgIHRoaXMuZGV2dG9vbHNFeHRlbnNpb24uc2VuZCh7IC4uLmFjdGlvbiwgdHlwZSB9LCBuZXdTdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZSB0aGUgYWN0aW9uIGZyb20gdGhlIGRldiB0b29scyBzdWJzY3JpcHRpb25cclxuICAgKi9cclxuICBkaXNwYXRjaGVkKGFjdGlvbjogTmd4c0RldnRvb2xzQWN0aW9uKSB7XHJcbiAgICAvLyBMYXp5IGdldCB0aGUgc3RvcmUgZm9yIGNpcmN1bGFyIGRlcGVkZW5jeSBpc3N1ZXNcclxuICAgIGNvbnN0IHN0b3JlID0gdGhpcy5faW5qZWN0b3IuZ2V0KFN0b3JlKTtcclxuICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RJU1BBVENIJykge1xyXG4gICAgICBpZiAoYWN0aW9uLnBheWxvYWQudHlwZSA9PT0gJ0pVTVBfVE9fQUNUSU9OJyB8fCBhY3Rpb24ucGF5bG9hZC50eXBlID09PSAnSlVNUF9UT19TVEFURScpIHtcclxuICAgICAgICBjb25zdCBwcmV2U3RhdGUgPSBKU09OLnBhcnNlKGFjdGlvbi5zdGF0ZSk7XHJcbiAgICAgICAgc3RvcmUucmVzZXQocHJldlN0YXRlKTtcclxuICAgICAgfSBlbHNlIGlmIChhY3Rpb24ucGF5bG9hZC50eXBlID09PSAnVE9HR0xFX0FDVElPTicpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ1NraXAgaXMgbm90IHN1cHBvcnRlZCBhdCB0aGlzIHRpbWUuJyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoYWN0aW9uLnBheWxvYWQudHlwZSA9PT0gJ0lNUE9SVF9TVEFURScpIHtcclxuICAgICAgICBjb25zdCB7IGFjdGlvbnNCeUlkLCBjb21wdXRlZFN0YXRlcywgY3VycmVudFN0YXRlSW5kZXggfSA9IGFjdGlvbi5wYXlsb2FkLm5leHRMaWZ0ZWRTdGF0ZTtcclxuICAgICAgICB0aGlzLmRldnRvb2xzRXh0ZW5zaW9uLmluaXQoY29tcHV0ZWRTdGF0ZXNbMF0uc3RhdGUpO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKGFjdGlvbnNCeUlkKVxyXG4gICAgICAgICAgLmZpbHRlcihhY3Rpb25JZCA9PiBhY3Rpb25JZCAhPT0gJzAnKVxyXG4gICAgICAgICAgLmZvckVhY2goYWN0aW9uSWQgPT4gdGhpcy5kZXZ0b29sc0V4dGVuc2lvbi5zZW5kKGFjdGlvbnNCeUlkW2FjdGlvbklkXSwgY29tcHV0ZWRTdGF0ZXNbYWN0aW9uSWRdLnN0YXRlKSk7XHJcbiAgICAgICAgc3RvcmUucmVzZXQoY29tcHV0ZWRTdGF0ZXNbY3VycmVudFN0YXRlSW5kZXhdLnN0YXRlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChhY3Rpb24udHlwZSA9PT0gJ0FDVElPTicpIHtcclxuICAgICAgY29uc3QgYWN0aW9uUGF5bG9hZCA9IEpTT04ucGFyc2UoYWN0aW9uLnBheWxvYWQpO1xyXG4gICAgICBzdG9yZS5kaXNwYXRjaChhY3Rpb25QYXlsb2FkKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19