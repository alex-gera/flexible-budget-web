import { __assign, __decorate, __metadata } from 'tslib';
import { NavigationCancel, NavigationError, Router, RoutesRecognized } from '@angular/router';
import { Action, Selector, State, Store, NgxsModule } from '@ngxs/store';
import { of } from 'rxjs';
import { NgZone, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
var  /**
 * @abstract
 * @template T
 */
RouterStateSerializer = /** @class */ (function () {
    function RouterStateSerializer() {
    }
    return RouterStateSerializer;
}());
var DefaultRouterStateSerializer = /** @class */ (function () {
    function DefaultRouterStateSerializer() {
    }
    /**
     * @param {?} routerState
     * @return {?}
     */
    DefaultRouterStateSerializer.prototype.serialize = /**
     * @param {?} routerState
     * @return {?}
     */
    function (routerState) {
        return {
            root: this.serializeRoute(routerState.root),
            url: routerState.url
        };
    };
    /**
     * @private
     * @param {?} route
     * @return {?}
     */
    DefaultRouterStateSerializer.prototype.serializeRoute = /**
     * @private
     * @param {?} route
     * @return {?}
     */
    function (route) {
        var _this = this;
        /** @type {?} */
        var children = route.children.map(function (c) { return _this.serializeRoute(c); });
        return {
            url: route.url,
            params: route.params,
            queryParams: route.queryParams,
            fragment: route.fragment,
            data: route.data,
            outlet: route.outlet,
            component: undefined,
            routeConfig: null,
            root: undefined,
            parent: undefined,
            firstChild: children[0],
            children: children,
            pathFromRoot: undefined,
            paramMap: route.paramMap,
            queryParamMap: route.queryParamMap,
            toString: route.toString
        };
    };
    return DefaultRouterStateSerializer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Public event api of the router
 */
var  /**
 * Public event api of the router
 */
Navigate = /** @class */ (function () {
    function Navigate(path, queryParams, extras) {
        this.path = path;
        this.queryParams = queryParams;
        this.extras = extras;
    }
    Object.defineProperty(Navigate, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] Navigate';
        },
        enumerable: true,
        configurable: true
    });
    return Navigate;
}());
/**
 *
 * Angular Routers internal state events
 *
 */
/**
 * An action dispatched when the router navigates.
 * @template T
 */
var  /**
 *
 * Angular Routers internal state events
 *
 */
/**
 * An action dispatched when the router navigates.
 * @template T
 */
RouterNavigation = /** @class */ (function () {
    function RouterNavigation(routerState, event) {
        this.routerState = routerState;
        this.event = event;
    }
    Object.defineProperty(RouterNavigation, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterNavigation';
        },
        enumerable: true,
        configurable: true
    });
    return RouterNavigation;
}());
/**
 * An action dispatched when the router cancel navigation.
 * @template T, V
 */
var  /**
 * An action dispatched when the router cancel navigation.
 * @template T, V
 */
RouterCancel = /** @class */ (function () {
    function RouterCancel(routerState, storeState, event) {
        this.routerState = routerState;
        this.storeState = storeState;
        this.event = event;
    }
    Object.defineProperty(RouterCancel, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterCancel';
        },
        enumerable: true,
        configurable: true
    });
    return RouterCancel;
}());
/**
 * An action dispatched when the router errors.
 * @template T, V
 */
var  /**
 * An action dispatched when the router errors.
 * @template T, V
 */
RouterError = /** @class */ (function () {
    function RouterError(routerState, storeState, event) {
        this.routerState = routerState;
        this.storeState = storeState;
        this.event = event;
    }
    Object.defineProperty(RouterError, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterError';
        },
        enumerable: true,
        configurable: true
    });
    return RouterError;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RouterState = /** @class */ (function () {
    function RouterState(_store, _router, _serializer, _ngZone) {
        this._store = _store;
        this._router = _router;
        this._serializer = _serializer;
        this._ngZone = _ngZone;
        this.dispatchTriggeredByRouter = false; // used only in dev mode in combination with routerReducer
        // used only in dev mode in combination with routerReducer
        this.navigationTriggeredByDispatch = false; // used only in dev mode in combination with routerReducer
        this.setUpRouterHook();
        this.setUpStoreListener();
        this.setUpStateRollbackEvents();
    }
    RouterState_1 = RouterState;
    /**
     * Selectors
     */
    // used only in dev mode in combination with routerReducer
    /**
     * Selectors
     * @param {?} state
     * @return {?}
     */
    RouterState.state = 
    // used only in dev mode in combination with routerReducer
    /**
     * Selectors
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state && state.state;
    };
    /**
     * @param {?} state
     * @return {?}
     */
    RouterState.url = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state && state.state && state.state.url;
    };
    /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.navigate = /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    function (ctx, action) {
        var _this = this;
        this._ngZone.run(function () {
            return _this._router.navigate(action.path, __assign({ queryParams: action.queryParams }, action.extras));
        });
    };
    /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.angularRouterAction = /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    function (ctx, action) {
        ctx.setState(__assign({}, ctx.getState(), { state: action.routerState, navigationId: action.event.id }));
    };
    /**
     * Hook into the angular router before each navigation action is performed
     * since the route tree can be large, we serialize it into something more manageable
     */
    /**
     * Hook into the angular router before each navigation action is performed
     * since the route tree can be large, we serialize it into something more manageable
     * @private
     * @return {?}
     */
    RouterState.prototype.setUpRouterHook = /**
     * Hook into the angular router before each navigation action is performed
     * since the route tree can be large, we serialize it into something more manageable
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        ((/** @type {?} */ (this._router))).hooks.beforePreactivation = function (routerStateSnapshot) {
            _this.routerStateSnapshot = _this._serializer.serialize(routerStateSnapshot);
            if (_this.shouldDispatchRouterNavigation())
                _this.dispatchRouterNavigation();
            return of(true);
        };
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.setUpStoreListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._store.select(RouterState_1).subscribe(function (s) {
            _this.routerState = s;
        });
        this._store.select(RouterState_1.state).subscribe(function () {
            _this.navigateIfNeeded();
        });
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.setUpStateRollbackEvents = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._router.events.subscribe(function (e) {
            if (e instanceof RoutesRecognized) {
                _this.lastRoutesRecognized = e;
            }
            else if (e instanceof NavigationCancel) {
                _this.dispatchRouterCancel(e);
            }
            else if (e instanceof NavigationError) {
                _this.dispatchRouterError(e);
            }
        });
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.shouldDispatchRouterNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.routerState)
            return true;
        return !this.navigationTriggeredByDispatch;
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.navigateIfNeeded = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.routerState || !this.routerState.state) {
            return;
        }
        if (this.dispatchTriggeredByRouter)
            return;
        if (this._router.url !== this.routerState.state.url) {
            this.navigationTriggeredByDispatch = true;
            this._ngZone.run(function () { return _this._router.navigateByUrl(_this.routerState.state.url); });
        }
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.dispatchRouterNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        this.dispatchRouterAction(new RouterNavigation(this.routerStateSnapshot, new RoutesRecognized(this.lastRoutesRecognized.id, this.lastRoutesRecognized.url, this.lastRoutesRecognized.urlAfterRedirects, this.routerStateSnapshot)));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterState.prototype.dispatchRouterCancel = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dispatchRouterAction(new RouterCancel(this.routerStateSnapshot, this.routerState, event));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterState.prototype.dispatchRouterError = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dispatchRouterAction(new RouterError(this.routerStateSnapshot, this.routerState, new NavigationError(event.id, event.url, "" + event)));
    };
    /**
     * @private
     * @template T
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.dispatchRouterAction = /**
     * @private
     * @template T
     * @param {?} action
     * @return {?}
     */
    function (action) {
        this.dispatchTriggeredByRouter = true;
        try {
            this._store.dispatch(action);
        }
        finally {
            this.dispatchTriggeredByRouter = false;
            this.navigationTriggeredByDispatch = false;
        }
    };
    var RouterState_1;
    __decorate([
        Action(Navigate),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Navigate]),
        __metadata("design:returntype", void 0)
    ], RouterState.prototype, "navigate", null);
    __decorate([
        Action([RouterNavigation, RouterError, RouterCancel]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], RouterState.prototype, "angularRouterAction", null);
    __decorate([
        Selector(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], RouterState, "state", null);
    __decorate([
        Selector(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", String)
    ], RouterState, "url", null);
    RouterState = RouterState_1 = __decorate([
        State({
            name: 'router',
            defaults: {
                state: null,
                navigationId: null
            }
        }),
        __metadata("design:paramtypes", [Store,
            Router,
            RouterStateSerializer,
            NgZone])
    ], RouterState);
    return RouterState;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// NOTE: Must mark as `dynamic` due to
// https://github.com/dherges/ng-packagr/issues/767
/** @type {?} */
var NgxsModuleRouterState = NgxsModule.forFeature([RouterState]);
// @dynamic
var NgxsRouterPluginModule = /** @class */ (function () {
    function NgxsRouterPluginModule() {
    }
    /**
     * @return {?}
     */
    NgxsRouterPluginModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NgxsRouterPluginModule,
            providers: []
        };
    };
    NgxsRouterPluginModule.decorators = [
        { type: NgModule, args: [{
                    imports: [NgxsModuleRouterState],
                    providers: [{ provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer }]
                },] }
    ];
    return NgxsRouterPluginModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxsRouterPluginModule, RouterState, RouterStateSerializer, DefaultRouterStateSerializer, Navigate, RouterNavigation, RouterCancel, RouterError, NgxsModuleRouterState as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4cy1yb3V0ZXItcGx1Z2luLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9Abmd4cy9yb3V0ZXItcGx1Z2luL3NyYy9zZXJpYWxpemVyLnRzIiwibmc6Ly9Abmd4cy9yb3V0ZXItcGx1Z2luL3NyYy9yb3V0ZXIuYWN0aW9ucy50cyIsIm5nOi8vQG5neHMvcm91dGVyLXBsdWdpbi9zcmMvcm91dGVyLnN0YXRlLnRzIiwibmc6Ly9Abmd4cy9yb3V0ZXItcGx1Z2luL3NyYy9yb3V0ZXIubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIFJvdXRlclN0YXRlU25hcHNob3QgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJvdXRlclN0YXRlU2VyaWFsaXplcjxUPiB7XHJcbiAgYWJzdHJhY3Qgc2VyaWFsaXplKHJvdXRlclN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogVDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZXJpYWxpemVkUm91dGVyU3RhdGVTbmFwc2hvdCB7XHJcbiAgcm9vdDogQWN0aXZhdGVkUm91dGVTbmFwc2hvdDtcclxuICB1cmw6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERlZmF1bHRSb3V0ZXJTdGF0ZVNlcmlhbGl6ZXIgaW1wbGVtZW50cyBSb3V0ZXJTdGF0ZVNlcmlhbGl6ZXI8U2VyaWFsaXplZFJvdXRlclN0YXRlU25hcHNob3Q+IHtcclxuICBzZXJpYWxpemUocm91dGVyU3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBTZXJpYWxpemVkUm91dGVyU3RhdGVTbmFwc2hvdCB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByb290OiB0aGlzLnNlcmlhbGl6ZVJvdXRlKHJvdXRlclN0YXRlLnJvb3QpLFxyXG4gICAgICB1cmw6IHJvdXRlclN0YXRlLnVybFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2VyaWFsaXplUm91dGUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90IHtcclxuICAgIGNvbnN0IGNoaWxkcmVuID0gcm91dGUuY2hpbGRyZW4ubWFwKGMgPT4gdGhpcy5zZXJpYWxpemVSb3V0ZShjKSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB1cmw6IHJvdXRlLnVybCxcclxuICAgICAgcGFyYW1zOiByb3V0ZS5wYXJhbXMsXHJcbiAgICAgIHF1ZXJ5UGFyYW1zOiByb3V0ZS5xdWVyeVBhcmFtcyxcclxuICAgICAgZnJhZ21lbnQ6IHJvdXRlLmZyYWdtZW50LFxyXG4gICAgICBkYXRhOiByb3V0ZS5kYXRhLFxyXG4gICAgICBvdXRsZXQ6IHJvdXRlLm91dGxldCxcclxuICAgICAgY29tcG9uZW50OiB1bmRlZmluZWQsXHJcbiAgICAgIHJvdXRlQ29uZmlnOiBudWxsLFxyXG4gICAgICByb290OiB1bmRlZmluZWQsXHJcbiAgICAgIHBhcmVudDogdW5kZWZpbmVkLFxyXG4gICAgICBmaXJzdENoaWxkOiBjaGlsZHJlblswXSxcclxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxyXG4gICAgICBwYXRoRnJvbVJvb3Q6IHVuZGVmaW5lZCxcclxuICAgICAgcGFyYW1NYXA6IHJvdXRlLnBhcmFtTWFwLFxyXG4gICAgICBxdWVyeVBhcmFtTWFwOiByb3V0ZS5xdWVyeVBhcmFtTWFwLFxyXG4gICAgICB0b1N0cmluZzogcm91dGUudG9TdHJpbmdcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgTmF2aWdhdGlvbkNhbmNlbCxcclxuICBOYXZpZ2F0aW9uRXJyb3IsXHJcbiAgTmF2aWdhdGlvbkV4dHJhcyxcclxuICBQYXJhbXMsXHJcbiAgUm91dGVyU3RhdGVTbmFwc2hvdCxcclxuICBSb3V0ZXNSZWNvZ25pemVkXHJcbn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuXHJcbi8qKlxyXG4gKiBQdWJsaWMgZXZlbnQgYXBpIG9mIHRoZSByb3V0ZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBOYXZpZ2F0ZSB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW1JvdXRlcl0gTmF2aWdhdGUnO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF0aDogYW55W10sIHB1YmxpYyBxdWVyeVBhcmFtcz86IFBhcmFtcywgcHVibGljIGV4dHJhcz86IE5hdmlnYXRpb25FeHRyYXMpIHt9XHJcbn1cclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBBbmd1bGFyIFJvdXRlcnMgaW50ZXJuYWwgc3RhdGUgZXZlbnRzXHJcbiAqXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEFuIGFjdGlvbiBkaXNwYXRjaGVkIHdoZW4gdGhlIHJvdXRlciBuYXZpZ2F0ZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUm91dGVyTmF2aWdhdGlvbjxUID0gUm91dGVyU3RhdGVTbmFwc2hvdD4ge1xyXG4gIHN0YXRpYyBnZXQgdHlwZSgpIHtcclxuICAgIC8vIE5PVEU6IE5vdCBuZWNlc3NhcnkgdG8gZGVjbGFyZSB0aGUgdHlwZSBpbiB0aGlzIHdheSBpbiB5b3VyIGNvZGUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbmd4cy9zdG9yZS9wdWxsLzY0NCNpc3N1ZWNvbW1lbnQtNDM2MDAzMTM4XHJcbiAgICByZXR1cm4gJ1tSb3V0ZXJdIFJvdXRlck5hdmlnYXRpb24nO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcm91dGVyU3RhdGU6IFQsIHB1YmxpYyBldmVudDogUm91dGVzUmVjb2duaXplZCkge31cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGFjdGlvbiBkaXNwYXRjaGVkIHdoZW4gdGhlIHJvdXRlciBjYW5jZWwgbmF2aWdhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSb3V0ZXJDYW5jZWw8VCwgViA9IFJvdXRlclN0YXRlU25hcHNob3Q+IHtcclxuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XHJcbiAgICAvLyBOT1RFOiBOb3QgbmVjZXNzYXJ5IHRvIGRlY2xhcmUgdGhlIHR5cGUgaW4gdGhpcyB3YXkgaW4geW91ciBjb2RlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25neHMvc3RvcmUvcHVsbC82NDQjaXNzdWVjb21tZW50LTQzNjAwMzEzOFxyXG4gICAgcmV0dXJuICdbUm91dGVyXSBSb3V0ZXJDYW5jZWwnO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcm91dGVyU3RhdGU6IFYsIHB1YmxpYyBzdG9yZVN0YXRlOiBULCBwdWJsaWMgZXZlbnQ6IE5hdmlnYXRpb25DYW5jZWwpIHt9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBhY3Rpb24gZGlzcGF0Y2hlZCB3aGVuIHRoZSByb3V0ZXIgZXJyb3JzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJvdXRlckVycm9yPFQsIFYgPSBSb3V0ZXJTdGF0ZVNuYXBzaG90PiB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW1JvdXRlcl0gUm91dGVyRXJyb3InO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcm91dGVyU3RhdGU6IFYsIHB1YmxpYyBzdG9yZVN0YXRlOiBULCBwdWJsaWMgZXZlbnQ6IE5hdmlnYXRpb25FcnJvcikge31cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIHVuaW9uIHR5cGUgb2Ygcm91dGVyIGFjdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSb3V0ZXJBY3Rpb248VCwgViA9IFJvdXRlclN0YXRlU25hcHNob3Q+ID0gUm91dGVyTmF2aWdhdGlvbjxWPiB8IFJvdXRlckNhbmNlbDxULCBWPiB8IFJvdXRlckVycm9yPFQsIFY+O1xyXG4iLCJpbXBvcnQgeyBOYXZpZ2F0aW9uQ2FuY2VsLCBOYXZpZ2F0aW9uRXJyb3IsIFJvdXRlciwgUm91dGVyU3RhdGVTbmFwc2hvdCwgUm91dGVzUmVjb2duaXplZCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IEFjdGlvbiwgU2VsZWN0b3IsIFN0YXRlLCBTdGF0ZUNvbnRleHQsIFN0b3JlIH0gZnJvbSAnQG5neHMvc3RvcmUnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgTmF2aWdhdGUsIFJvdXRlckFjdGlvbiwgUm91dGVyQ2FuY2VsLCBSb3V0ZXJFcnJvciwgUm91dGVyTmF2aWdhdGlvbiB9IGZyb20gJy4vcm91dGVyLmFjdGlvbnMnO1xyXG5pbXBvcnQgeyBSb3V0ZXJTdGF0ZVNlcmlhbGl6ZXIgfSBmcm9tICcuL3NlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCB0eXBlIFJvdXRlclN0YXRlTW9kZWw8VCA9IFJvdXRlclN0YXRlU25hcHNob3Q+ID0ge1xyXG4gIHN0YXRlOiBUO1xyXG4gIG5hdmlnYXRpb25JZDogbnVtYmVyO1xyXG59O1xyXG5cclxuQFN0YXRlPFJvdXRlclN0YXRlTW9kZWw+KHtcclxuICBuYW1lOiAncm91dGVyJyxcclxuICBkZWZhdWx0czoge1xyXG4gICAgc3RhdGU6IG51bGwsXHJcbiAgICBuYXZpZ2F0aW9uSWQ6IG51bGxcclxuICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSb3V0ZXJTdGF0ZSB7XHJcbiAgcHJpdmF0ZSByb3V0ZXJTdGF0ZVNuYXBzaG90OiBSb3V0ZXJTdGF0ZVNuYXBzaG90O1xyXG4gIHByaXZhdGUgcm91dGVyU3RhdGU6IFJvdXRlclN0YXRlTW9kZWw7XHJcbiAgcHJpdmF0ZSBsYXN0Um91dGVzUmVjb2duaXplZDogUm91dGVzUmVjb2duaXplZDtcclxuICBwcml2YXRlIGRpc3BhdGNoVHJpZ2dlcmVkQnlSb3V0ZXIgPSBmYWxzZTsgLy8gdXNlZCBvbmx5IGluIGRldiBtb2RlIGluIGNvbWJpbmF0aW9uIHdpdGggcm91dGVyUmVkdWNlclxyXG4gIHByaXZhdGUgbmF2aWdhdGlvblRyaWdnZXJlZEJ5RGlzcGF0Y2ggPSBmYWxzZTsgLy8gdXNlZCBvbmx5IGluIGRldiBtb2RlIGluIGNvbWJpbmF0aW9uIHdpdGggcm91dGVyUmVkdWNlclxyXG5cclxuICAvKipcclxuICAgKiBTZWxlY3RvcnNcclxuICAgKi9cclxuXHJcbiAgQFNlbGVjdG9yKClcclxuICBzdGF0aWMgc3RhdGUoc3RhdGU6IFJvdXRlclN0YXRlTW9kZWwpIHtcclxuICAgIHJldHVybiBzdGF0ZSAmJiBzdGF0ZS5zdGF0ZTtcclxuICB9XHJcblxyXG4gIEBTZWxlY3RvcigpXHJcbiAgc3RhdGljIHVybChzdGF0ZTogUm91dGVyU3RhdGVNb2RlbCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gc3RhdGUgJiYgc3RhdGUuc3RhdGUgJiYgc3RhdGUuc3RhdGUudXJsO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIF9zdG9yZTogU3RvcmUsXHJcbiAgICBwcml2YXRlIF9yb3V0ZXI6IFJvdXRlcixcclxuICAgIHByaXZhdGUgX3NlcmlhbGl6ZXI6IFJvdXRlclN0YXRlU2VyaWFsaXplcjxSb3V0ZXJTdGF0ZVNuYXBzaG90PixcclxuICAgIHByaXZhdGUgX25nWm9uZTogTmdab25lXHJcbiAgKSB7XHJcbiAgICB0aGlzLnNldFVwUm91dGVySG9vaygpO1xyXG4gICAgdGhpcy5zZXRVcFN0b3JlTGlzdGVuZXIoKTtcclxuICAgIHRoaXMuc2V0VXBTdGF0ZVJvbGxiYWNrRXZlbnRzKCk7XHJcbiAgfVxyXG5cclxuICBAQWN0aW9uKE5hdmlnYXRlKVxyXG4gIG5hdmlnYXRlKGN0eDogU3RhdGVDb250ZXh0PFJvdXRlclN0YXRlTW9kZWw+LCBhY3Rpb246IE5hdmlnYXRlKSB7XHJcbiAgICB0aGlzLl9uZ1pvbmUucnVuKCgpID0+XHJcbiAgICAgIHRoaXMuX3JvdXRlci5uYXZpZ2F0ZShhY3Rpb24ucGF0aCwge1xyXG4gICAgICAgIHF1ZXJ5UGFyYW1zOiBhY3Rpb24ucXVlcnlQYXJhbXMsXHJcbiAgICAgICAgLi4uYWN0aW9uLmV4dHJhc1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIEBBY3Rpb24oW1JvdXRlck5hdmlnYXRpb24sIFJvdXRlckVycm9yLCBSb3V0ZXJDYW5jZWxdKVxyXG4gIGFuZ3VsYXJSb3V0ZXJBY3Rpb24oY3R4OiBTdGF0ZUNvbnRleHQ8Um91dGVyU3RhdGVNb2RlbD4sIGFjdGlvbjogUm91dGVyQWN0aW9uPGFueSwgUm91dGVyU3RhdGVTbmFwc2hvdD4pIHtcclxuICAgIGN0eC5zZXRTdGF0ZSh7XHJcbiAgICAgIC4uLmN0eC5nZXRTdGF0ZSgpLFxyXG4gICAgICBzdGF0ZTogYWN0aW9uLnJvdXRlclN0YXRlLFxyXG4gICAgICBuYXZpZ2F0aW9uSWQ6IGFjdGlvbi5ldmVudC5pZFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIb29rIGludG8gdGhlIGFuZ3VsYXIgcm91dGVyIGJlZm9yZSBlYWNoIG5hdmlnYXRpb24gYWN0aW9uIGlzIHBlcmZvcm1lZFxyXG4gICAqIHNpbmNlIHRoZSByb3V0ZSB0cmVlIGNhbiBiZSBsYXJnZSwgd2Ugc2VyaWFsaXplIGl0IGludG8gc29tZXRoaW5nIG1vcmUgbWFuYWdlYWJsZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgc2V0VXBSb3V0ZXJIb29rKCk6IHZvaWQge1xyXG4gICAgKDxhbnk+dGhpcy5fcm91dGVyKS5ob29rcy5iZWZvcmVQcmVhY3RpdmF0aW9uID0gKHJvdXRlclN0YXRlU25hcHNob3Q6IFJvdXRlclN0YXRlU25hcHNob3QpID0+IHtcclxuICAgICAgdGhpcy5yb3V0ZXJTdGF0ZVNuYXBzaG90ID0gdGhpcy5fc2VyaWFsaXplci5zZXJpYWxpemUocm91dGVyU3RhdGVTbmFwc2hvdCk7XHJcbiAgICAgIGlmICh0aGlzLnNob3VsZERpc3BhdGNoUm91dGVyTmF2aWdhdGlvbigpKSB0aGlzLmRpc3BhdGNoUm91dGVyTmF2aWdhdGlvbigpO1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRVcFN0b3JlTGlzdGVuZXIoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zdG9yZS5zZWxlY3QoUm91dGVyU3RhdGUpLnN1YnNjcmliZShzID0+IHtcclxuICAgICAgdGhpcy5yb3V0ZXJTdGF0ZSA9IHM7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX3N0b3JlLnNlbGVjdChSb3V0ZXJTdGF0ZS5zdGF0ZSkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgdGhpcy5uYXZpZ2F0ZUlmTmVlZGVkKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0VXBTdGF0ZVJvbGxiYWNrRXZlbnRzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fcm91dGVyLmV2ZW50cy5zdWJzY3JpYmUoZSA9PiB7XHJcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgUm91dGVzUmVjb2duaXplZCkge1xyXG4gICAgICAgIHRoaXMubGFzdFJvdXRlc1JlY29nbml6ZWQgPSBlO1xyXG4gICAgICB9IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uQ2FuY2VsKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaFJvdXRlckNhbmNlbChlKTtcclxuICAgICAgfSBlbHNlIGlmIChlIGluc3RhbmNlb2YgTmF2aWdhdGlvbkVycm9yKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaFJvdXRlckVycm9yKGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2hvdWxkRGlzcGF0Y2hSb3V0ZXJOYXZpZ2F0aW9uKCk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCF0aGlzLnJvdXRlclN0YXRlKSByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiAhdGhpcy5uYXZpZ2F0aW9uVHJpZ2dlcmVkQnlEaXNwYXRjaDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbmF2aWdhdGVJZk5lZWRlZCgpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5yb3V0ZXJTdGF0ZSB8fCAhdGhpcy5yb3V0ZXJTdGF0ZS5zdGF0ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5kaXNwYXRjaFRyaWdnZXJlZEJ5Um91dGVyKSByZXR1cm47XHJcblxyXG4gICAgaWYgKHRoaXMuX3JvdXRlci51cmwgIT09IHRoaXMucm91dGVyU3RhdGUuc3RhdGUudXJsKSB7XHJcbiAgICAgIHRoaXMubmF2aWdhdGlvblRyaWdnZXJlZEJ5RGlzcGF0Y2ggPSB0cnVlO1xyXG4gICAgICB0aGlzLl9uZ1pvbmUucnVuKCgpID0+IHRoaXMuX3JvdXRlci5uYXZpZ2F0ZUJ5VXJsKHRoaXMucm91dGVyU3RhdGUuc3RhdGUudXJsKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRpc3BhdGNoUm91dGVyTmF2aWdhdGlvbigpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcGF0Y2hSb3V0ZXJBY3Rpb24oXHJcbiAgICAgIG5ldyBSb3V0ZXJOYXZpZ2F0aW9uKFxyXG4gICAgICAgIHRoaXMucm91dGVyU3RhdGVTbmFwc2hvdCxcclxuICAgICAgICBuZXcgUm91dGVzUmVjb2duaXplZChcclxuICAgICAgICAgIHRoaXMubGFzdFJvdXRlc1JlY29nbml6ZWQuaWQsXHJcbiAgICAgICAgICB0aGlzLmxhc3RSb3V0ZXNSZWNvZ25pemVkLnVybCxcclxuICAgICAgICAgIHRoaXMubGFzdFJvdXRlc1JlY29nbml6ZWQudXJsQWZ0ZXJSZWRpcmVjdHMsXHJcbiAgICAgICAgICB0aGlzLnJvdXRlclN0YXRlU25hcHNob3RcclxuICAgICAgICApXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRpc3BhdGNoUm91dGVyQ2FuY2VsKGV2ZW50OiBOYXZpZ2F0aW9uQ2FuY2VsKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3BhdGNoUm91dGVyQWN0aW9uKG5ldyBSb3V0ZXJDYW5jZWwodGhpcy5yb3V0ZXJTdGF0ZVNuYXBzaG90LCB0aGlzLnJvdXRlclN0YXRlLCBldmVudCkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkaXNwYXRjaFJvdXRlckVycm9yKGV2ZW50OiBOYXZpZ2F0aW9uRXJyb3IpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcGF0Y2hSb3V0ZXJBY3Rpb24oXHJcbiAgICAgIG5ldyBSb3V0ZXJFcnJvcih0aGlzLnJvdXRlclN0YXRlU25hcHNob3QsIHRoaXMucm91dGVyU3RhdGUsIG5ldyBOYXZpZ2F0aW9uRXJyb3IoZXZlbnQuaWQsIGV2ZW50LnVybCwgYCR7ZXZlbnR9YCkpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkaXNwYXRjaFJvdXRlckFjdGlvbjxUPihhY3Rpb246IFJvdXRlckFjdGlvbjxUPik6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwYXRjaFRyaWdnZXJlZEJ5Um91dGVyID0gdHJ1ZTtcclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMuX3N0b3JlLmRpc3BhdGNoKGFjdGlvbik7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICB0aGlzLmRpc3BhdGNoVHJpZ2dlcmVkQnlSb3V0ZXIgPSBmYWxzZTtcclxuICAgICAgdGhpcy5uYXZpZ2F0aW9uVHJpZ2dlcmVkQnlEaXNwYXRjaCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ3hzTW9kdWxlIH0gZnJvbSAnQG5neHMvc3RvcmUnO1xyXG5pbXBvcnQgeyBEZWZhdWx0Um91dGVyU3RhdGVTZXJpYWxpemVyLCBSb3V0ZXJTdGF0ZVNlcmlhbGl6ZXIgfSBmcm9tICcuL3NlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBSb3V0ZXJTdGF0ZSB9IGZyb20gJy4vcm91dGVyLnN0YXRlJztcclxuXHJcbi8vIE5PVEU6IE11c3QgbWFyayBhcyBgZHluYW1pY2AgZHVlIHRvXHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kaGVyZ2VzL25nLXBhY2thZ3IvaXNzdWVzLzc2N1xyXG5leHBvcnQgY29uc3QgTmd4c01vZHVsZVJvdXRlclN0YXRlID0gTmd4c01vZHVsZS5mb3JGZWF0dXJlKFtSb3V0ZXJTdGF0ZV0pO1xyXG5cclxuLy8gQGR5bmFtaWNcclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbTmd4c01vZHVsZVJvdXRlclN0YXRlXSxcclxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IFJvdXRlclN0YXRlU2VyaWFsaXplciwgdXNlQ2xhc3M6IERlZmF1bHRSb3V0ZXJTdGF0ZVNlcmlhbGl6ZXIgfV1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5neHNSb3V0ZXJQbHVnaW5Nb2R1bGUge1xyXG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IE5neHNSb3V0ZXJQbHVnaW5Nb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW11cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJ0c2xpYl8xLl9fZGVjb3JhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7O0lBQUE7S0FFQztJQUFELDRCQUFDO0NBQUEsSUFBQTs7SUFPRDtLQTZCQzs7Ozs7SUE1QkMsZ0RBQVM7Ozs7SUFBVCxVQUFVLFdBQWdD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