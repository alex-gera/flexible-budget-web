import { __assign, __decorate, __metadata } from 'tslib';
import { NgZone, Injectable, NgModule } from '@angular/core';
import { NavigationCancel, NavigationError, Router, RoutesRecognized, ResolveEnd } from '@angular/router';
import { Action, Selector, State, Store, NgxsModule } from '@ngxs/store';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
var  /**
 * @abstract
 * @template T
 */
RouterStateSerializer = /** @class */ (function () {
    function RouterStateSerializer() {
    }
    return RouterStateSerializer;
}());
var DefaultRouterStateSerializer = /** @class */ (function () {
    function DefaultRouterStateSerializer() {
    }
    /**
     * @param {?} routerState
     * @return {?}
     */
    DefaultRouterStateSerializer.prototype.serialize = /**
     * @param {?} routerState
     * @return {?}
     */
    function (routerState) {
        return {
            root: this.serializeRoute(routerState.root),
            url: routerState.url
        };
    };
    /**
     * @private
     * @param {?} route
     * @return {?}
     */
    DefaultRouterStateSerializer.prototype.serializeRoute = /**
     * @private
     * @param {?} route
     * @return {?}
     */
    function (route) {
        var _this = this;
        /** @type {?} */
        var children = route.children.map((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return _this.serializeRoute(c); }));
        return {
            url: route.url,
            params: route.params,
            queryParams: route.queryParams,
            fragment: route.fragment,
            data: route.data,
            outlet: route.outlet,
            component: null,
            routeConfig: null,
            root: (/** @type {?} */ (null)),
            parent: null,
            firstChild: children[0],
            children: children,
            pathFromRoot: (/** @type {?} */ (null)),
            paramMap: route.paramMap,
            queryParamMap: route.queryParamMap,
            toString: route.toString
        };
    };
    return DefaultRouterStateSerializer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Public event api of the router
 */
var  /**
 * Public event api of the router
 */
Navigate = /** @class */ (function () {
    function Navigate(path, queryParams, extras) {
        this.path = path;
        this.queryParams = queryParams;
        this.extras = extras;
    }
    Object.defineProperty(Navigate, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] Navigate';
        },
        enumerable: true,
        configurable: true
    });
    return Navigate;
}());
/**
 *
 * Angular Routers internal state events
 *
 */
/**
 * An action dispatched when the router navigates.
 * @template T
 */
var  /**
 *
 * Angular Routers internal state events
 *
 */
/**
 * An action dispatched when the router navigates.
 * @template T
 */
RouterNavigation = /** @class */ (function () {
    function RouterNavigation(routerState, event) {
        this.routerState = routerState;
        this.event = event;
    }
    Object.defineProperty(RouterNavigation, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterNavigation';
        },
        enumerable: true,
        configurable: true
    });
    return RouterNavigation;
}());
/**
 * An action dispatched when the router cancel navigation.
 * @template T, V
 */
var  /**
 * An action dispatched when the router cancel navigation.
 * @template T, V
 */
RouterCancel = /** @class */ (function () {
    function RouterCancel(routerState, storeState, event) {
        this.routerState = routerState;
        this.storeState = storeState;
        this.event = event;
    }
    Object.defineProperty(RouterCancel, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterCancel';
        },
        enumerable: true,
        configurable: true
    });
    return RouterCancel;
}());
/**
 * An action dispatched when the router errors.
 * @template T, V
 */
var  /**
 * An action dispatched when the router errors.
 * @template T, V
 */
RouterError = /** @class */ (function () {
    function RouterError(routerState, storeState, event) {
        this.routerState = routerState;
        this.storeState = storeState;
        this.event = event;
    }
    Object.defineProperty(RouterError, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterError';
        },
        enumerable: true,
        configurable: true
    });
    return RouterError;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RouterState = /** @class */ (function () {
    function RouterState(_store, _router, _serializer, _ngZone) {
        this._store = _store;
        this._router = _router;
        this._serializer = _serializer;
        this._ngZone = _ngZone;
        this.dispatchTriggeredByRouter = false; // used only in dev mode in combination with routerReducer
        // used only in dev mode in combination with routerReducer
        this.navigationTriggeredByDispatch = false; // used only in dev mode in combination with routerReducer
        this.setUpStoreListener();
        this.setUpStateRollbackEvents();
    }
    RouterState_1 = RouterState;
    /**
     * Selectors
     */
    // used only in dev mode in combination with routerReducer
    /**
     * Selectors
     * @template T
     * @param {?} state
     * @return {?}
     */
    RouterState.state = 
    // used only in dev mode in combination with routerReducer
    /**
     * Selectors
     * @template T
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state && state.state;
    };
    /**
     * @param {?} state
     * @return {?}
     */
    RouterState.url = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state && state.state && state.state.url;
    };
    /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.navigate = /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    function (ctx, action) {
        var _this = this;
        this._ngZone.run((/**
         * @return {?}
         */
        function () {
            return _this._router.navigate(action.path, __assign({ queryParams: action.queryParams }, action.extras));
        }));
    };
    /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.angularRouterAction = /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    function (ctx, action) {
        ctx.setState(__assign({}, ctx.getState(), { state: action.routerState, navigationId: action.event.id }));
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.setUpStoreListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._store.select(RouterState_1).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            _this.routerState = s;
        }));
        this._store.select(RouterState_1.state).subscribe((/**
         * @return {?}
         */
        function () {
            _this.navigateIfNeeded();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.setUpStateRollbackEvents = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._router.events.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e instanceof RoutesRecognized) {
                _this.lastRoutesRecognized = e;
            }
            else if (e instanceof ResolveEnd) {
                _this.resolveEnd(e.state);
            }
            else if (e instanceof NavigationCancel) {
                _this.dispatchRouterCancel(e);
            }
            else if (e instanceof NavigationError) {
                _this.dispatchRouterError(e);
            }
        }));
    };
    /**
     * The `ResolveEnd` event is always triggered after running all resolvers
     * that are linked to some route and child routes
     */
    /**
     * The `ResolveEnd` event is always triggered after running all resolvers
     * that are linked to some route and child routes
     * @private
     * @param {?} routerStateSnapshot
     * @return {?}
     */
    RouterState.prototype.resolveEnd = /**
     * The `ResolveEnd` event is always triggered after running all resolvers
     * that are linked to some route and child routes
     * @private
     * @param {?} routerStateSnapshot
     * @return {?}
     */
    function (routerStateSnapshot) {
        this.routerStateSnapshot = this._serializer.serialize(routerStateSnapshot);
        if (this.shouldDispatchRouterNavigation()) {
            this.dispatchRouterNavigation();
        }
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.shouldDispatchRouterNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.routerState)
            return true;
        return !this.navigationTriggeredByDispatch;
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.navigateIfNeeded = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.routerState || !this.routerState.state) {
            return;
        }
        if (this.dispatchTriggeredByRouter)
            return;
        if (this._router.url !== this.routerState.state.url) {
            this.navigationTriggeredByDispatch = true;
            this._ngZone.run((/**
             * @return {?}
             */
            function () { return _this._router.navigateByUrl((/** @type {?} */ (_this.routerState.state)).url); }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.dispatchRouterNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        this.dispatchRouterAction(new RouterNavigation(this.routerStateSnapshot, new RoutesRecognized(this.lastRoutesRecognized.id, this.lastRoutesRecognized.url, this.lastRoutesRecognized.urlAfterRedirects, this.routerStateSnapshot)));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterState.prototype.dispatchRouterCancel = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dispatchRouterAction(new RouterCancel(this.routerStateSnapshot, this.routerState, event));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterState.prototype.dispatchRouterError = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dispatchRouterAction(new RouterError(this.routerStateSnapshot, this.routerState, new NavigationError(event.id, event.url, "" + event)));
    };
    /**
     * @private
     * @template T
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.dispatchRouterAction = /**
     * @private
     * @template T
     * @param {?} action
     * @return {?}
     */
    function (action) {
        this.dispatchTriggeredByRouter = true;
        try {
            this._store.dispatch(action);
        }
        finally {
            this.dispatchTriggeredByRouter = false;
            this.navigationTriggeredByDispatch = false;
        }
    };
    var RouterState_1;
    RouterState.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RouterState.ctorParameters = function () { return [
        { type: Store },
        { type: Router },
        { type: RouterStateSerializer },
        { type: NgZone }
    ]; };
    __decorate([
        Action(Navigate),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Navigate]),
        __metadata("design:returntype", void 0)
    ], RouterState.prototype, "navigate", null);
    __decorate([
        Action([RouterNavigation, RouterError, RouterCancel]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], RouterState.prototype, "angularRouterAction", null);
    __decorate([
        Selector(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], RouterState, "state", null);
    __decorate([
        Selector(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Object)
    ], RouterState, "url", null);
    RouterState = RouterState_1 = __decorate([
        State({
            name: 'router',
            defaults: {
                state: undefined,
                navigationId: undefined
            }
        }),
        __metadata("design:paramtypes", [Store,
            Router,
            RouterStateSerializer,
            NgZone])
    ], RouterState);
    return RouterState;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var NgxsRouterPluginModule = /** @class */ (function () {
    function NgxsRouterPluginModule() {
    }
    /**
     * @return {?}
     */
    NgxsRouterPluginModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NgxsRouterPluginModule
        };
    };
    NgxsRouterPluginModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        // NOTE: Must mark as `dynamic` due to
                        // https://github.com/dherges/ng-packagr/issues/767
                        NgxsModule.forFeature([RouterState])
                    ],
                    providers: [{ provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer }]
                },] }
    ];
    return NgxsRouterPluginModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxsRouterPluginModule, RouterState, RouterStateSerializer, DefaultRouterStateSerializer, Navigate, RouterNavigation, RouterCancel, RouterError };

//# sourceMappingURL=ngxs-router-plugin.js.map