import { NavigationCancel, NavigationError, NavigationExtras, Params, RouterStateSnapshot, RoutesRecognized } from '@angular/router';
/**
 * Public event api of the router
 */
export declare class Navigate {
    path: any[];
    queryParams?: Params | undefined;
    extras?: NavigationExtras | undefined;
    static readonly type: string;
    constructor(path: any[], queryParams?: Params | undefined, extras?: NavigationExtras | undefined);
}
/**
 *
 * Angular Routers internal state events
 *
 */
/**
 * An action dispatched when the router navigates.
 */
export declare class RouterNavigation<T = RouterStateSnapshot> {
    routerState: T;
    event: RoutesRecognized;
    static readonly type: string;
    constructor(routerState: T, event: RoutesRecognized);
}
/**
 * An action dispatched when the router cancel navigation.
 */
export declare class RouterCancel<T, V = RouterStateSnapshot> {
    routerState: V;
    storeState: T;
    event: NavigationCancel;
    static readonly type: string;
    constructor(routerState: V, storeState: T, event: NavigationCancel);
}
/**
 * An action dispatched when the router errors.
 */
export declare class RouterError<T, V = RouterStateSnapshot> {
    routerState: V;
    storeState: T;
    event: NavigationError;
    static readonly type: string;
    constructor(routerState: V, storeState: T, event: NavigationError);
}
/**
 * An union type of router actions.
 */
export declare type RouterAction<T, V = RouterStateSnapshot> = RouterNavigation<V> | RouterCancel<T, V> | RouterError<T, V>;
