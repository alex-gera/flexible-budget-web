import { NgZone } from '@angular/core';
import { Router, RouterStateSnapshot } from '@angular/router';
import { StateContext, Store } from '@ngxs/store';
import { Navigate, RouterAction } from './router.actions';
import { RouterStateSerializer } from './serializer';
export declare type RouterStateModel<T = RouterStateSnapshot> = {
    state?: T;
    navigationId?: number;
};
export declare class RouterState {
    private _store;
    private _router;
    private _serializer;
    private _ngZone;
    private routerStateSnapshot;
    private routerState;
    private lastRoutesRecognized;
    private dispatchTriggeredByRouter;
    private navigationTriggeredByDispatch;
    /**
     * Selectors
     */
    static state<T = RouterStateSnapshot>(state: RouterStateModel<T>): T | undefined;
    static url(state: RouterStateModel): string | undefined;
    constructor(_store: Store, _router: Router, _serializer: RouterStateSerializer<RouterStateSnapshot>, _ngZone: NgZone);
    navigate(ctx: StateContext<RouterStateModel>, action: Navigate): void;
    angularRouterAction(ctx: StateContext<RouterStateModel>, action: RouterAction<any, RouterStateSnapshot>): void;
    private setUpStoreListener;
    private setUpStateRollbackEvents;
    /**
     * The `ResolveEnd` event is always triggered after running all resolvers
     * that are linked to some route and child routes
     */
    private resolveEnd;
    private shouldDispatchRouterNavigation;
    private navigateIfNeeded;
    private dispatchRouterNavigation;
    private dispatchRouterCancel;
    private dispatchRouterError;
    private dispatchRouterAction;
}
