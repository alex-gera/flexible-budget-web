/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NavigationCancel, NavigationError, Router, RoutesRecognized } from '@angular/router';
import { Action, Selector, State, Store } from '@ngxs/store';
import { of } from 'rxjs';
import { Navigate, RouterCancel, RouterError, RouterNavigation } from './router.actions';
import { RouterStateSerializer } from './serializer';
import { NgZone } from '@angular/core';
var RouterState = /** @class */ (function () {
    function RouterState(_store, _router, _serializer, _ngZone) {
        this._store = _store;
        this._router = _router;
        this._serializer = _serializer;
        this._ngZone = _ngZone;
        this.dispatchTriggeredByRouter = false; // used only in dev mode in combination with routerReducer
        // used only in dev mode in combination with routerReducer
        this.navigationTriggeredByDispatch = false; // used only in dev mode in combination with routerReducer
        this.setUpRouterHook();
        this.setUpStoreListener();
        this.setUpStateRollbackEvents();
    }
    RouterState_1 = RouterState;
    /**
     * Selectors
     */
    // used only in dev mode in combination with routerReducer
    /**
     * Selectors
     * @param {?} state
     * @return {?}
     */
    RouterState.state = 
    // used only in dev mode in combination with routerReducer
    /**
     * Selectors
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state && state.state;
    };
    /**
     * @param {?} state
     * @return {?}
     */
    RouterState.url = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state && state.state && state.state.url;
    };
    /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.navigate = /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    function (ctx, action) {
        var _this = this;
        this._ngZone.run(function () {
            return _this._router.navigate(action.path, tslib_1.__assign({ queryParams: action.queryParams }, action.extras));
        });
    };
    /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.angularRouterAction = /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    function (ctx, action) {
        ctx.setState(tslib_1.__assign({}, ctx.getState(), { state: action.routerState, navigationId: action.event.id }));
    };
    /**
     * Hook into the angular router before each navigation action is performed
     * since the route tree can be large, we serialize it into something more manageable
     */
    /**
     * Hook into the angular router before each navigation action is performed
     * since the route tree can be large, we serialize it into something more manageable
     * @private
     * @return {?}
     */
    RouterState.prototype.setUpRouterHook = /**
     * Hook into the angular router before each navigation action is performed
     * since the route tree can be large, we serialize it into something more manageable
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        ((/** @type {?} */ (this._router))).hooks.beforePreactivation = function (routerStateSnapshot) {
            _this.routerStateSnapshot = _this._serializer.serialize(routerStateSnapshot);
            if (_this.shouldDispatchRouterNavigation())
                _this.dispatchRouterNavigation();
            return of(true);
        };
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.setUpStoreListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._store.select(RouterState_1).subscribe(function (s) {
            _this.routerState = s;
        });
        this._store.select(RouterState_1.state).subscribe(function () {
            _this.navigateIfNeeded();
        });
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.setUpStateRollbackEvents = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._router.events.subscribe(function (e) {
            if (e instanceof RoutesRecognized) {
                _this.lastRoutesRecognized = e;
            }
            else if (e instanceof NavigationCancel) {
                _this.dispatchRouterCancel(e);
            }
            else if (e instanceof NavigationError) {
                _this.dispatchRouterError(e);
            }
        });
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.shouldDispatchRouterNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.routerState)
            return true;
        return !this.navigationTriggeredByDispatch;
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.navigateIfNeeded = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.routerState || !this.routerState.state) {
            return;
        }
        if (this.dispatchTriggeredByRouter)
            return;
        if (this._router.url !== this.routerState.state.url) {
            this.navigationTriggeredByDispatch = true;
            this._ngZone.run(function () { return _this._router.navigateByUrl(_this.routerState.state.url); });
        }
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.dispatchRouterNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        this.dispatchRouterAction(new RouterNavigation(this.routerStateSnapshot, new RoutesRecognized(this.lastRoutesRecognized.id, this.lastRoutesRecognized.url, this.lastRoutesRecognized.urlAfterRedirects, this.routerStateSnapshot)));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterState.prototype.dispatchRouterCancel = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dispatchRouterAction(new RouterCancel(this.routerStateSnapshot, this.routerState, event));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterState.prototype.dispatchRouterError = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dispatchRouterAction(new RouterError(this.routerStateSnapshot, this.routerState, new NavigationError(event.id, event.url, "" + event)));
    };
    /**
     * @private
     * @template T
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.dispatchRouterAction = /**
     * @private
     * @template T
     * @param {?} action
     * @return {?}
     */
    function (action) {
        this.dispatchTriggeredByRouter = true;
        try {
            this._store.dispatch(action);
        }
        finally {
            this.dispatchTriggeredByRouter = false;
            this.navigationTriggeredByDispatch = false;
        }
    };
    var RouterState_1;
    tslib_1.__decorate([
        Action(Navigate),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Navigate]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RouterState.prototype, "navigate", null);
    tslib_1.__decorate([
        Action([RouterNavigation, RouterError, RouterCancel]),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RouterState.prototype, "angularRouterAction", null);
    tslib_1.__decorate([
        Selector(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RouterState, "state", null);
    tslib_1.__decorate([
        Selector(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", String)
    ], RouterState, "url", null);
    RouterState = RouterState_1 = tslib_1.__decorate([
        State({
            name: 'router',
            defaults: {
                state: null,
                navigationId: null
            }
        }),
        tslib_1.__metadata("design:paramtypes", [Store,
            Router,
            RouterStateSerializer,
            NgZone])
    ], RouterState);
    return RouterState;
}());
export { RouterState };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype.routerStateSnapshot;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype.routerState;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype.lastRoutesRecognized;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype.dispatchTriggeredByRouter;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype.navigationTriggeredByDispatch;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._store;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._router;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._serializer;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._ngZone;
}
//# sourceMappingURL=data:application/json;base64,