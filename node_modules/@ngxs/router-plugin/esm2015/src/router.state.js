import * as tslib_1 from "tslib";
var RouterState_1;
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NavigationCancel, NavigationError, Router, RoutesRecognized } from '@angular/router';
import { Action, Selector, State, Store } from '@ngxs/store';
import { of } from 'rxjs';
import { Navigate, RouterCancel, RouterError, RouterNavigation } from './router.actions';
import { RouterStateSerializer } from './serializer';
import { NgZone } from '@angular/core';
let RouterState = RouterState_1 = class RouterState {
    /**
     * @param {?} _store
     * @param {?} _router
     * @param {?} _serializer
     * @param {?} _ngZone
     */
    constructor(_store, _router, _serializer, _ngZone) {
        this._store = _store;
        this._router = _router;
        this._serializer = _serializer;
        this._ngZone = _ngZone;
        this.dispatchTriggeredByRouter = false; // used only in dev mode in combination with routerReducer
        // used only in dev mode in combination with routerReducer
        this.navigationTriggeredByDispatch = false; // used only in dev mode in combination with routerReducer
        this.setUpRouterHook();
        this.setUpStoreListener();
        this.setUpStateRollbackEvents();
    }
    // used only in dev mode in combination with routerReducer
    /**
     * Selectors
     * @param {?} state
     * @return {?}
     */
    static state(state) {
        return state && state.state;
    }
    /**
     * @param {?} state
     * @return {?}
     */
    static url(state) {
        return state && state.state && state.state.url;
    }
    /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    navigate(ctx, action) {
        this._ngZone.run(() => this._router.navigate(action.path, Object.assign({ queryParams: action.queryParams }, action.extras)));
    }
    /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    angularRouterAction(ctx, action) {
        ctx.setState(Object.assign({}, ctx.getState(), { state: action.routerState, navigationId: action.event.id }));
    }
    /**
     * Hook into the angular router before each navigation action is performed
     * since the route tree can be large, we serialize it into something more manageable
     * @private
     * @return {?}
     */
    setUpRouterHook() {
        ((/** @type {?} */ (this._router))).hooks.beforePreactivation = (routerStateSnapshot) => {
            this.routerStateSnapshot = this._serializer.serialize(routerStateSnapshot);
            if (this.shouldDispatchRouterNavigation())
                this.dispatchRouterNavigation();
            return of(true);
        };
    }
    /**
     * @private
     * @return {?}
     */
    setUpStoreListener() {
        this._store.select(RouterState_1).subscribe(s => {
            this.routerState = s;
        });
        this._store.select(RouterState_1.state).subscribe(() => {
            this.navigateIfNeeded();
        });
    }
    /**
     * @private
     * @return {?}
     */
    setUpStateRollbackEvents() {
        this._router.events.subscribe(e => {
            if (e instanceof RoutesRecognized) {
                this.lastRoutesRecognized = e;
            }
            else if (e instanceof NavigationCancel) {
                this.dispatchRouterCancel(e);
            }
            else if (e instanceof NavigationError) {
                this.dispatchRouterError(e);
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    shouldDispatchRouterNavigation() {
        if (!this.routerState)
            return true;
        return !this.navigationTriggeredByDispatch;
    }
    /**
     * @private
     * @return {?}
     */
    navigateIfNeeded() {
        if (!this.routerState || !this.routerState.state) {
            return;
        }
        if (this.dispatchTriggeredByRouter)
            return;
        if (this._router.url !== this.routerState.state.url) {
            this.navigationTriggeredByDispatch = true;
            this._ngZone.run(() => this._router.navigateByUrl(this.routerState.state.url));
        }
    }
    /**
     * @private
     * @return {?}
     */
    dispatchRouterNavigation() {
        this.dispatchRouterAction(new RouterNavigation(this.routerStateSnapshot, new RoutesRecognized(this.lastRoutesRecognized.id, this.lastRoutesRecognized.url, this.lastRoutesRecognized.urlAfterRedirects, this.routerStateSnapshot)));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    dispatchRouterCancel(event) {
        this.dispatchRouterAction(new RouterCancel(this.routerStateSnapshot, this.routerState, event));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    dispatchRouterError(event) {
        this.dispatchRouterAction(new RouterError(this.routerStateSnapshot, this.routerState, new NavigationError(event.id, event.url, `${event}`)));
    }
    /**
     * @private
     * @template T
     * @param {?} action
     * @return {?}
     */
    dispatchRouterAction(action) {
        this.dispatchTriggeredByRouter = true;
        try {
            this._store.dispatch(action);
        }
        finally {
            this.dispatchTriggeredByRouter = false;
            this.navigationTriggeredByDispatch = false;
        }
    }
};
tslib_1.__decorate([
    Action(Navigate),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Navigate]),
    tslib_1.__metadata("design:returntype", void 0)
], RouterState.prototype, "navigate", null);
tslib_1.__decorate([
    Action([RouterNavigation, RouterError, RouterCancel]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], RouterState.prototype, "angularRouterAction", null);
tslib_1.__decorate([
    Selector(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], RouterState, "state", null);
tslib_1.__decorate([
    Selector(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", String)
], RouterState, "url", null);
RouterState = RouterState_1 = tslib_1.__decorate([
    State({
        name: 'router',
        defaults: {
            state: null,
            navigationId: null
        }
    }),
    tslib_1.__metadata("design:paramtypes", [Store,
        Router,
        RouterStateSerializer,
        NgZone])
], RouterState);
export { RouterState };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype.routerStateSnapshot;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype.routerState;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype.lastRoutesRecognized;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype.dispatchTriggeredByRouter;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype.navigationTriggeredByDispatch;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._store;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._router;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._serializer;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._ngZone;
}
//# sourceMappingURL=data:application/json;base64,