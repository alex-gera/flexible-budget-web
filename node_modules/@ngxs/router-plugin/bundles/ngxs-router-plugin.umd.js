(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@ngxs/store')) :
    typeof define === 'function' && define.amd ? define('@ngxs/router-plugin', ['exports', '@angular/core', '@angular/router', '@ngxs/store'], factory) :
    (factory((global.ngxs = global.ngxs || {}, global.ngxs['router-plugin'] = {}),global.ng.core,global.ng.router,global['ngxs-store']));
}(this, (function (exports,core,router,store) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     * @template T
     */
    var /**
     * @abstract
     * @template T
     */ RouterStateSerializer = /** @class */ (function () {
        function RouterStateSerializer() {
        }
        return RouterStateSerializer;
    }());
    var DefaultRouterStateSerializer = /** @class */ (function () {
        function DefaultRouterStateSerializer() {
        }
        /**
         * @param {?} routerState
         * @return {?}
         */
        DefaultRouterStateSerializer.prototype.serialize = /**
         * @param {?} routerState
         * @return {?}
         */
            function (routerState) {
                return {
                    root: this.serializeRoute(routerState.root),
                    url: routerState.url
                };
            };
        /**
         * @private
         * @param {?} route
         * @return {?}
         */
        DefaultRouterStateSerializer.prototype.serializeRoute = /**
         * @private
         * @param {?} route
         * @return {?}
         */
            function (route) {
                var _this = this;
                /** @type {?} */
                var children = route.children.map(( /**
                 * @param {?} c
                 * @return {?}
                 */function (c) { return _this.serializeRoute(c); }));
                return {
                    url: route.url,
                    params: route.params,
                    queryParams: route.queryParams,
                    fragment: route.fragment,
                    data: route.data,
                    outlet: route.outlet,
                    component: null,
                    routeConfig: null,
                    root: ( /** @type {?} */(null)),
                    parent: null,
                    firstChild: children[0],
                    children: children,
                    pathFromRoot: ( /** @type {?} */(null)),
                    paramMap: route.paramMap,
                    queryParamMap: route.queryParamMap,
                    toString: route.toString
                };
            };
        return DefaultRouterStateSerializer;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Public event api of the router
     */
    var /**
     * Public event api of the router
     */ Navigate = /** @class */ (function () {
        function Navigate(path, queryParams, extras) {
            this.path = path;
            this.queryParams = queryParams;
            this.extras = extras;
        }
        Object.defineProperty(Navigate, "type", {
            get: /**
             * @return {?}
             */ function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Router] Navigate';
            },
            enumerable: true,
            configurable: true
        });
        return Navigate;
    }());
    /**
     *
     * Angular Routers internal state events
     *
     */
    /**
     * An action dispatched when the router navigates.
     * @template T
     */
    var  /**
     *
     * Angular Routers internal state events
     *
     */ 
    /**
     * An action dispatched when the router navigates.
     * @template T
     */
    RouterNavigation = /** @class */ (function () {
        function RouterNavigation(routerState, event) {
            this.routerState = routerState;
            this.event = event;
        }
        Object.defineProperty(RouterNavigation, "type", {
            get: /**
             * @return {?}
             */ function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Router] RouterNavigation';
            },
            enumerable: true,
            configurable: true
        });
        return RouterNavigation;
    }());
    /**
     * An action dispatched when the router cancel navigation.
     * @template T, V
     */
    var /**
     * An action dispatched when the router cancel navigation.
     * @template T, V
     */ RouterCancel = /** @class */ (function () {
        function RouterCancel(routerState, storeState, event) {
            this.routerState = routerState;
            this.storeState = storeState;
            this.event = event;
        }
        Object.defineProperty(RouterCancel, "type", {
            get: /**
             * @return {?}
             */ function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Router] RouterCancel';
            },
            enumerable: true,
            configurable: true
        });
        return RouterCancel;
    }());
    /**
     * An action dispatched when the router errors.
     * @template T, V
     */
    var /**
     * An action dispatched when the router errors.
     * @template T, V
     */ RouterError = /** @class */ (function () {
        function RouterError(routerState, storeState, event) {
            this.routerState = routerState;
            this.storeState = storeState;
            this.event = event;
        }
        Object.defineProperty(RouterError, "type", {
            get: /**
             * @return {?}
             */ function () {
                // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
                return '[Router] RouterError';
            },
            enumerable: true,
            configurable: true
        });
        return RouterError;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RouterState = /** @class */ (function () {
        function RouterState(_store, _router, _serializer, _ngZone) {
            this._store = _store;
            this._router = _router;
            this._serializer = _serializer;
            this._ngZone = _ngZone;
            this.dispatchTriggeredByRouter = false; // used only in dev mode in combination with routerReducer
            // used only in dev mode in combination with routerReducer
            this.navigationTriggeredByDispatch = false; // used only in dev mode in combination with routerReducer
            this.setUpStoreListener();
            this.setUpStateRollbackEvents();
        }
        RouterState_1 = RouterState;
        /**
         * Selectors
         */
        // used only in dev mode in combination with routerReducer
        /**
         * Selectors
         * @template T
         * @param {?} state
         * @return {?}
         */
        RouterState.state =
            // used only in dev mode in combination with routerReducer
            /**
             * Selectors
             * @template T
             * @param {?} state
             * @return {?}
             */
            function (state) {
                return state && state.state;
            };
        /**
         * @param {?} state
         * @return {?}
         */
        RouterState.url = /**
         * @param {?} state
         * @return {?}
         */
            function (state) {
                return state && state.state && state.state.url;
            };
        /**
         * @param {?} ctx
         * @param {?} action
         * @return {?}
         */
        RouterState.prototype.navigate = /**
         * @param {?} ctx
         * @param {?} action
         * @return {?}
         */
            function (ctx, action) {
                var _this = this;
                this._ngZone.run(( /**
                 * @return {?}
                 */function () {
                    return _this._router.navigate(action.path, __assign({ queryParams: action.queryParams }, action.extras));
                }));
            };
        /**
         * @param {?} ctx
         * @param {?} action
         * @return {?}
         */
        RouterState.prototype.angularRouterAction = /**
         * @param {?} ctx
         * @param {?} action
         * @return {?}
         */
            function (ctx, action) {
                ctx.setState(__assign({}, ctx.getState(), { state: action.routerState, navigationId: action.event.id }));
            };
        /**
         * @private
         * @return {?}
         */
        RouterState.prototype.setUpStoreListener = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this._store.select(RouterState_1).subscribe(( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) {
                    _this.routerState = s;
                }));
                this._store.select(RouterState_1.state).subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.navigateIfNeeded();
                }));
            };
        /**
         * @private
         * @return {?}
         */
        RouterState.prototype.setUpStateRollbackEvents = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this._router.events.subscribe(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    if (e instanceof router.RoutesRecognized) {
                        _this.lastRoutesRecognized = e;
                    }
                    else if (e instanceof router.ResolveEnd) {
                        _this.resolveEnd(e.state);
                    }
                    else if (e instanceof router.NavigationCancel) {
                        _this.dispatchRouterCancel(e);
                    }
                    else if (e instanceof router.NavigationError) {
                        _this.dispatchRouterError(e);
                    }
                }));
            };
        /**
         * The `ResolveEnd` event is always triggered after running all resolvers
         * that are linked to some route and child routes
         */
        /**
         * The `ResolveEnd` event is always triggered after running all resolvers
         * that are linked to some route and child routes
         * @private
         * @param {?} routerStateSnapshot
         * @return {?}
         */
        RouterState.prototype.resolveEnd = /**
         * The `ResolveEnd` event is always triggered after running all resolvers
         * that are linked to some route and child routes
         * @private
         * @param {?} routerStateSnapshot
         * @return {?}
         */
            function (routerStateSnapshot) {
                this.routerStateSnapshot = this._serializer.serialize(routerStateSnapshot);
                if (this.shouldDispatchRouterNavigation()) {
                    this.dispatchRouterNavigation();
                }
            };
        /**
         * @private
         * @return {?}
         */
        RouterState.prototype.shouldDispatchRouterNavigation = /**
         * @private
         * @return {?}
         */
            function () {
                if (!this.routerState)
                    return true;
                return !this.navigationTriggeredByDispatch;
            };
        /**
         * @private
         * @return {?}
         */
        RouterState.prototype.navigateIfNeeded = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.routerState || !this.routerState.state) {
                    return;
                }
                if (this.dispatchTriggeredByRouter)
                    return;
                if (this._router.url !== this.routerState.state.url) {
                    this.navigationTriggeredByDispatch = true;
                    this._ngZone.run(( /**
                     * @return {?}
                     */function () { return _this._router.navigateByUrl(( /** @type {?} */(_this.routerState.state)).url); }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        RouterState.prototype.dispatchRouterNavigation = /**
         * @private
         * @return {?}
         */
            function () {
                this.dispatchRouterAction(new RouterNavigation(this.routerStateSnapshot, new router.RoutesRecognized(this.lastRoutesRecognized.id, this.lastRoutesRecognized.url, this.lastRoutesRecognized.urlAfterRedirects, this.routerStateSnapshot)));
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        RouterState.prototype.dispatchRouterCancel = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.dispatchRouterAction(new RouterCancel(this.routerStateSnapshot, this.routerState, event));
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        RouterState.prototype.dispatchRouterError = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.dispatchRouterAction(new RouterError(this.routerStateSnapshot, this.routerState, new router.NavigationError(event.id, event.url, "" + event)));
            };
        /**
         * @private
         * @template T
         * @param {?} action
         * @return {?}
         */
        RouterState.prototype.dispatchRouterAction = /**
         * @private
         * @template T
         * @param {?} action
         * @return {?}
         */
            function (action) {
                this.dispatchTriggeredByRouter = true;
                try {
                    this._store.dispatch(action);
                }
                finally {
                    this.dispatchTriggeredByRouter = false;
                    this.navigationTriggeredByDispatch = false;
                }
            };
        var RouterState_1;
        RouterState.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RouterState.ctorParameters = function () {
            return [
                { type: store.Store },
                { type: router.Router },
                { type: RouterStateSerializer },
                { type: core.NgZone }
            ];
        };
        __decorate([
            store.Action(Navigate),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object, Navigate]),
            __metadata("design:returntype", void 0)
        ], RouterState.prototype, "navigate", null);
        __decorate([
            store.Action([RouterNavigation, RouterError, RouterCancel]),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object, Object]),
            __metadata("design:returntype", void 0)
        ], RouterState.prototype, "angularRouterAction", null);
        __decorate([
            store.Selector(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], RouterState, "state", null);
        __decorate([
            store.Selector(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", Object)
        ], RouterState, "url", null);
        RouterState = RouterState_1 = __decorate([
            store.State({
                name: 'router',
                defaults: {
                    state: undefined,
                    navigationId: undefined
                }
            }),
            __metadata("design:paramtypes", [store.Store,
                router.Router,
                RouterStateSerializer,
                core.NgZone])
        ], RouterState);
        return RouterState;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // @dynamic
    var NgxsRouterPluginModule = /** @class */ (function () {
        function NgxsRouterPluginModule() {
        }
        /**
         * @return {?}
         */
        NgxsRouterPluginModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: NgxsRouterPluginModule
                };
            };
        NgxsRouterPluginModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            // NOTE: Must mark as `dynamic` due to
                            // https://github.com/dherges/ng-packagr/issues/767
                            store.NgxsModule.forFeature([RouterState])
                        ],
                        providers: [{ provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer }]
                    },] }
        ];
        return NgxsRouterPluginModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxsRouterPluginModule = NgxsRouterPluginModule;
    exports.RouterState = RouterState;
    exports.RouterStateSerializer = RouterStateSerializer;
    exports.DefaultRouterStateSerializer = DefaultRouterStateSerializer;
    exports.Navigate = Navigate;
    exports.RouterNavigation = RouterNavigation;
    exports.RouterCancel = RouterCancel;
    exports.RouterError = RouterError;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngxs-router-plugin.umd.js.map